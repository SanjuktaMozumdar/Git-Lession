Introduction to Git:
---------------------

Git is a Distributed Version Control System (DVCS)
	. Have the local copy of the code
	. Also, the entire commit history
	. easy to use

Staging Area - Files in the Staging area will be tracked by Git. Apart from the files in the staging area, Git ignores other files.

Commit History - Everytime we commit, we create a new version of the file.

** We need to add the files to the Staging area before Commiting

-------------
Git Commands: open git bash/ cmd in the current working directory
------------- 

1. [git init] -> (it initialise and create empty git repository)
2. [git init -b main] -> (for initializing and making it a specific branch)
3. [git add <fileName>] -> (this adds the mentioned file to the staging area and it will be tracked by Git)
4. [git commit -m "commit message"] -> (for commiting or saving the file. We need to add the tracing message)
5. [git log] -> (returns the commit history)
6. [git status] -> (returns the status of the current working files)
7. [git commit -a -m "message"] -> (adding command to directly commit, skipping the staging area)
8. [git diff] -> (return the difference in [last commit or staging area] and [current file in working directory])
9. [git diff --staged] -> (returns the difference in [last commit] and [staging area])
10. [git add .] -> (this adds all the files present in the working directory to the staging area)
11. [git restore --staged <fileNme>] -> (to unstage a specific file from the staging area)

--------------
Git + Github: steps as follows
---------------
a. Create Repository at Github
b. Open gitBash
12. [ssh-keygen -o] -> (to generate ssh-key, It requests to set id and password)
c. goto the mentioned location where .ssh file is created
d. in cmd open id_rsa.pub
e. copy the ssh key
f. goto github > settings > SSH and GPG keys > add SSH key
13. [git remote add origin <ssh link from the newly created repository>]
14. [git remote -v] -> (return the github  fetch and push link)
15. [git push origin main] -> (pushing local repository to remote)

--------------
Tags
--------------
    . Tags are used to mark specific points in your project's history as being important.
    . They're often used to mark release versions (e.g., v1.0.0, v2.0.1) or milestones.
    . They are like a branch that doesn’t change—they are static pointers to a specific commits.
    . Type of tags :
        i. Lightweight tag ->
            >It is simply a pointer to a specific commit. It is not stored as a full object and does not contain any metadata or message.
            >Used for local development, debugging or quick reference.
            >Not ideal for formal versioning release.
        ii. Annotated tag ->
            >It is a complete object in Git, stored in git database as a full object with
                    . metadata [name, email, date, tagging message]
                    . message [additional description]
                    . commit hash
            >Ideal for versioning release.
            >Suitable for sharing tags in collaborative environment as they contain metadata.

16. [git tag] -> (return all the given tags to the particular project)
17. [git tag <tag name> -m "message"] -> (used for adding annotated tag)
18. [git show <tag name>] -> (return the description of the version i.e - tagger, date, message)
19. [git push origin <tag name> -> (it push the tag to the remote repository)

-------------
Branch
-------------

20. [git branch] -> (return all the existing branch)
21. Creating branch:
    i. [git checkout -b <branch name>]
    ii. [git switch -c <branch name>]
22. [git switch <branch name>] -> (to switch from existing branch to specified branch)
